/*
 * Copyright (C) 2025 camren-chraplak
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.cchraplak.ugs.platform.plugin.toolchanger;

import com.willwinder.ugs.nbp.lib.lookup.CentralLookup;
import com.willwinder.universalgcodesender.i18n.Localization;
import com.willwinder.universalgcodesender.listeners.MessageListener;
import com.willwinder.universalgcodesender.listeners.MessageType;
import com.willwinder.universalgcodesender.listeners.UGSEventListener;
import com.willwinder.universalgcodesender.model.BackendAPI;
import com.willwinder.universalgcodesender.model.UGSEvent;
import com.willwinder.universalgcodesender.model.events.ControllerStateEvent;
import com.willwinder.universalgcodesender.utils.Settings;
import java.util.ArrayList;
import java.util.Objects;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.cchraplak.ugs.platform.plugin.toolchanger//ToolTable//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ToolTableTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "com.cchraplak.ugs.platform.plugin.toolchanger.ToolTableTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ToolTableAction",
        preferredID = "ToolTableTopComponent"
)
@Messages({
    "CTL_ToolTableAction=ToolTable",
    "CTL_ToolTableTopComponent=ToolTable Window",
    "HINT_ToolTableTopComponent=This is a ToolTable window"
})
public final class ToolTableTopComponent extends TopComponent implements MessageListener, UGSEventListener {

    // UGS overide values
    public static final String ACTION_ID = "com.cchraplak.ugs.platform.plugin.toolchanger.ToolTableTopComponent";
    private final JLabel status = new JLabel();
    private final transient BackendAPI backend;
    private final Settings settings;
    
    private boolean listenToConsole = false;
    private ArrayList<TableRow> table = new ArrayList<TableRow>();
    private boolean retrievedTable = false;
    
    //@Override;
    public void UGSEvent(UGSEvent event) {
        if (event instanceof ControllerStateEvent controllerStateEvent) {
            status.setText(controllerStateEvent.getState().name());
        }
    }
    
    /*private void ugsInitComponents() {
        removeAll();
        setLayout(new BorderLayout());

        status.setHorizontalAlignment(SwingConstants.CENTER);
        status.setText(backend.getControllerState().name());
        add(status, BorderLayout.CENTER);
    }*/
    
    public ToolTableTopComponent() {
        // default
        initComponents();
        setName(Bundle.CTL_ToolTableTopComponent());
        setToolTipText(Bundle.HINT_ToolTableTopComponent());
        
        // UGS backend
        settings = CentralLookup.getDefault().lookup(Settings.class);
        backend = CentralLookup.getDefault().lookup(BackendAPI.class);
        backend.addUGSEventListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        toolTable = new javax.swing.JTable();
        randomPos = new javax.swing.JButton();
        loadTool = new javax.swing.JButton();
        removeTool = new javax.swing.JButton();
        resetTable = new javax.swing.JButton();

        toolTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Description", "Pocket", "Current", "X Offset", "Y Offset", "Z Offset", "C Offset", "Radius"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        toolTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                toolTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        toolTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                toolTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(toolTable);
        if (toolTable.getColumnModel().getColumnCount() > 0) {
            toolTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title0")); // NOI18N
            toolTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title1")); // NOI18N
            toolTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title2_1")); // NOI18N
            toolTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jTable1.columnModel.title4_1")); // NOI18N
            toolTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jTable1.columnModel.title3_1")); // NOI18N
            toolTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title6")); // NOI18N
            toolTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title7")); // NOI18N
            toolTable.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title8")); // NOI18N
            toolTable.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title5")); // NOI18N
            toolTable.getColumnModel().getColumn(9).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title9")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(randomPos, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.randomPos.text")); // NOI18N
        randomPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomPosActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(loadTool, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.loadTool.text")); // NOI18N
        loadTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadToolActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeTool, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.removeTool.text")); // NOI18N
        removeTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToolActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(resetTable, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.resetTable.text")); // NOI18N
        resetTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resetTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(randomPos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadTool)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeTool)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetTable)
                    .addComponent(randomPos)
                    .addComponent(loadTool)
                    .addComponent(removeTool))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void randomPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomPosActionPerformed
        // TODO add your handling code here:
        try {
            backend.sendGcodeCommand("G90 X10 Y10 Z5");
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error going to random position===================================\n\n");
        }
    }//GEN-LAST:event_randomPosActionPerformed

    private void loadToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadToolActionPerformed
        // TODO add your handling code here:
        String[] commands = {"M05", "G90 Z10", "G90 X0 Y0", "G90 Z0", "M03 S1500", "G90 Z-10", "G90 Z0", "G90 Z-10", "G90 Z10", "M05"};
        try {
            for (int i = 0; i < commands.length; i++) {
                backend.sendGcodeCommand(commands[i]);
            }
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error loading tool===================================\n\n");
        }
    }//GEN-LAST:event_loadToolActionPerformed

    private void removeToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToolActionPerformed
        // TODO add your handling code here:
        String[] commands = {"M05", "G90 Z10", "G90 X0 Y0", "G90 Z0", "M04 S1500", "G90 Z-10", "G90 Z10", "M05"};
        try {
            for (int i = 0; i < commands.length; i++) {
                backend.sendGcodeCommand(commands[i]);
            }
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error removing tool===================================\n\n");
        }
    }//GEN-LAST:event_removeToolActionPerformed

    private void resetTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTableActionPerformed
        // TODO add your handling code here:
        
        removeTable();
        
        try {
            backend.sendGcodeCommand("$#");
            System.out.println("Start of message");
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error retrieving tool table===================================\n\n");
        }
        
        listenToConsole = true;
    }//GEN-LAST:event_resetTableActionPerformed

    private void toolTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_toolTableAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_toolTableAncestorAdded

    private void toolTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_toolTablePropertyChange
        // TODO add your handling code here:
        int column = toolTable.getSelectedColumn();
        int row = toolTable.getSelectedRow();
        //TableModel model = toolTable.getModel();
        DefaultTableModel model = (DefaultTableModel) toolTable.getModel();
        
        try {
            String newVal = String.valueOf(model.getValueAt(row, column));
            editRow(row, column, newVal);
        }
        catch (Exception e) {
            System.out.println("Unable to edit value");
        }
        
        
    }//GEN-LAST:event_toolTablePropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadTool;
    private javax.swing.JButton randomPos;
    private javax.swing.JButton removeTool;
    private javax.swing.JButton resetTable;
    private javax.swing.JTable toolTable;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // UGS overides
        super.componentOpened();
        //ugsInitComponents();

        setName(Localization.getString("Tool Changer"));
        setToolTipText(Localization.getString("toolchanger"));
        backend.addUGSEventListener(this);
        backend.addMessageListener(this);
        
        removeTable();
        
        try {
            if (!retrievedTable) {
                listenToConsole = true;
                backend.sendGcodeCommand("$#");
                System.out.println("Startup Retrieve");
            }
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error startup retrieving tool table===================================\n\n");
        }
    }

    @Override
    public void componentClosed() {
        // UGS overrides
        super.componentClosed();
        backend.removeUGSEventListener(this);
        retrievedTable = false;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private void addRow(int id, Float[] offsets, Float radius) {

        try {
            DefaultTableModel model = (DefaultTableModel) toolTable.getModel();

            Object[] comp = { id, "name", "description", null, null,  offsets[0], offsets[1], offsets[2], offsets[3], radius};
            model.addRow(comp);
            table.add(new TableRow(id, offsets[0], offsets[1], offsets[2], offsets[3], radius));
        }
        catch (Exception e) {
            System.out.println("Unable to parse variables!!!");
        }
    }
    
    private void editRow(int row, int column, String newValue) throws Exception {
        
        System.out.println("Edit: " + Integer.toString(row) + ", " + Integer.toString(column) + ", new value: " + newValue + ", old value: " + toolTable.getValueAt(row, column));
        
        if (row >= toolTable.getRowCount() || row < 0) {
            System.out.println("Row out of bounds!");
            return;
        }
        
        int id = table.get(row).getID();
        switch (column) {
            case 1:
                if (!Objects.equals(table.get(row).getName(), newValue)) {
                    table.get(row).setName(newValue);
                }
            break;
            case 2:
                if (!Objects.equals(table.get(row).getDescription(), newValue)) {
                    table.get(row).setDescription(newValue);
                }
            break;
            case 3:
                Integer newPocket = Integer.valueOf(newValue);
                if (!Objects.equals(table.get(row).getPocket(), newPocket)) {
                    table.get(row).setPocket(newPocket);
                }
            break;
            case 4:

                DefaultTableModel model = (DefaultTableModel) toolTable.getModel();

                boolean loaded = false;

                boolean current = Boolean.valueOf(newValue);

                if (!current) {
                    table.get(row).setCurrent(false);
                }

                for (int j = 0; j < table.size(); j++) {
                    if (table.get(j).getCurrent()) {
                        loaded = true;
                    }
                }
                if (loaded) {
                    System.out.println("Another tool in place");
                }
                else {
                    // TODO: add code for getting current tool
                    backend.sendGcodeCommand("T" + Integer.toString(id));
                    table.get(row).setCurrent(current);
                    model.setValueAt(newValue, row, 4);
                }

            break;
            case 5:
                Float newX = Float.valueOf(newValue);
                if (!Objects.equals(table.get(row).getXOffset(), newX)) {
                    backend.sendGcodeCommand("G10 L1 P" + Integer.toString(id) + " X" + newValue);
                    table.get(row).setXOffset(newX);
                }
            break;
            case 6:
                Float newY = Float.valueOf(newValue);
                if (!Objects.equals(table.get(row).getYOffset(), newY)) {
                    backend.sendGcodeCommand("G10 L1 P" + Integer.toString(id) + " Y" + newValue);
                    table.get(row).setYOffset(newY);
                }
            break;
            case 7:
                Float newZ = Float.valueOf(newValue);
                if (!Objects.equals(table.get(row).getZOffset(), newZ)) {
                    backend.sendGcodeCommand("G10 L1 P" + Integer.toString(id) + " Z" + newValue);
                    table.get(row).setZOffset(newZ);
                }
            break;
            case 8:
                Float newA = Float.valueOf(newValue);
                if (!Objects.equals(table.get(row).getCOffset(), newA)) {
                    backend.sendGcodeCommand("G10 L1 P" + Integer.toString(id) + " A" + newValue);
                    table.get(row).setCOffset(newA);
                }
                
            break;
            case 9:
                Float newR = Float.valueOf(newValue);
                if (!Objects.equals(table.get(row).getRadius(), newR)) {
                    //backend.sendGcodeCommand("G10 L1 P" + Integer.toString(id) + " R" + newValue);
                    table.get(row).setRadius(newR);
                }
            break;
            default:
                System.out.println("No value edited!");
            break;
        }
    }

    @Override
    public void onMessage(MessageType messageType, String message) {
        
        if (!retrievedTable) {
            if (message.contains("Connected")) {
                try {
                    listenToConsole = true;
                    backend.sendGcodeCommand("$#");
                    System.out.println("connected getting table");
                    retrievedTable = true;
                }
                catch (Exception e) {
                    System.out.println("Failed connected getting table");
                }
            }
            else if (message.contains("$#")) {
                try {
                    listenToConsole = true;
                    System.out.println("Auto getting table");
                    retrievedTable = true;
                }
                catch (Exception e) {
                    System.out.println("Failed auto getting table");
                }
            }
        }
        
        if (listenToConsole) {
            
            if (message.contains("T:")) {
                int start = message.indexOf(':');
                int middle = message.indexOf('|');
                int end = message.lastIndexOf('|');
                
                String[] offsetStrings = message.substring(middle + 1, end).split(",");
                Float[] offsets = new Float[4];
                offsets[3] = null;
                for (int i = 0; i < offsetStrings.length; i++) {
                    offsets[i] = Float.valueOf(offsetStrings[i]);
                }
                
                String idSring = message.substring(start + 1, middle);
                Integer id = Integer.valueOf(idSring);
                String radiusString = message.substring(end + 1, message.length() - 2);
                Float radius = Float.valueOf(radiusString);
                
                
                for (int i = 0; i < table.size(); i++) {
                    if (Objects.equals(table.get(i).getID(), id)) {
                        try {
                            editRow(id, 0, idSring);
                            editRow(id, 5, offsetStrings[0]);
                            editRow(id, 6, offsetStrings[1]);
                            editRow(id, 7, offsetStrings[2]);
                            if (offsetStrings.length > 3) {
                                editRow(id, 8, offsetStrings[3]);
                            }
                            editRow(id, 9, radiusString);
                            return;
                        }
                        catch (Exception e) {
                            System.out.println("Unable to edit row from GCode!");
                        }
                    }
                }
                addRow(id, offsets, radius);
            }
            else if (message.contains("TLO")) {
                
            }
            else if (message.contains("ok")) {
                System.out.println("Message Ended!");
                listenToConsole = false;
            }
        }
    }
    
    public void removeTable() {
        
        retrievedTable = false;
        
        table.removeAll(table);
        
        DefaultTableModel model = (DefaultTableModel) toolTable.getModel();
        final int numRos = model.getRowCount();
        
        for (int i = numRos - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
}
