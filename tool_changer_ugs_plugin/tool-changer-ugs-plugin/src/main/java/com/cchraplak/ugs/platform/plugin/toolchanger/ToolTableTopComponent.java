/*
 * Copyright (C) 2025 camren-chraplak
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.cchraplak.ugs.platform.plugin.toolchanger;

import com.willwinder.ugs.nbp.lib.Mode;
import com.willwinder.ugs.nbp.lib.lookup.CentralLookup;
import com.willwinder.ugs.nbp.lib.services.LocalizingService;
import com.willwinder.universalgcodesender.i18n.Localization;
import com.willwinder.universalgcodesender.listeners.UGSEventListener;
import com.willwinder.universalgcodesender.model.BackendAPI;
import com.willwinder.universalgcodesender.model.UGSEvent;
import com.willwinder.universalgcodesender.model.events.ControllerStateEvent;
import com.willwinder.universalgcodesender.utils.Settings;
import java.awt.BorderLayout;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.cchraplak.ugs.platform.plugin.toolchanger//ToolTable//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ToolTableTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "com.cchraplak.ugs.platform.plugin.toolchanger.ToolTableTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ToolTableAction",
        preferredID = "ToolTableTopComponent"
)
@Messages({
    "CTL_ToolTableAction=ToolTable",
    "CTL_ToolTableTopComponent=ToolTable Window",
    "HINT_ToolTableTopComponent=This is a ToolTable window"
})
public final class ToolTableTopComponent extends TopComponent implements UGSEventListener {

    // UGS overide values
    //public static final String ACTION_ID = "com.cchraplak.ugs.platform.plugin.toolchanger.ToolTableTopComponent";
    private final JLabel status = new JLabel();
    private final transient BackendAPI backend;
    //private final Settings settings;
    
    @Override
    public void UGSEvent(UGSEvent event) {
        if (event instanceof ControllerStateEvent controllerStateEvent) {
            status.setText(controllerStateEvent.getState().name());
        }
    }
    
    /*private void ugsInitComponents() {
        removeAll();
        setLayout(new BorderLayout());

        status.setHorizontalAlignment(SwingConstants.CENTER);
        status.setText(backend.getControllerState().name());
        add(status, BorderLayout.CENTER);
    }*/
    
    public ToolTableTopComponent() {
        // default
        initComponents();
        setName(Bundle.CTL_ToolTableTopComponent());
        setToolTipText(Bundle.HINT_ToolTableTopComponent());
        
        // UGS backend
        //settings = CentralLookup.getDefault().lookup(Settings.class);
        backend = CentralLookup.getDefault().lookup(BackendAPI.class);
        backend.addUGSEventListener(this);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        randomPos = new javax.swing.JButton();
        loadTool = new javax.swing.JButton();
        removeTool = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "Test1", "asdf", null},
                {null, "Test2", null, null}
            },
            new String [] {
                "ID", "Name", "Description", "Loaded?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jTable1.columnModel.title0")); // NOI18N
            jTable1.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jTable1.columnModel.title1")); // NOI18N
            jTable1.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jTable1.columnModel.title2_1")); // NOI18N
            jTable1.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jTable1.columnModel.title3_1")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(randomPos, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.randomPos.text")); // NOI18N
        randomPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomPosActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(loadTool, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.loadTool.text")); // NOI18N
        loadTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadToolActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeTool, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.removeTool.text")); // NOI18N
        removeTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToolActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(randomPos)
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeTool)
                            .addComponent(loadTool))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(randomPos)
                        .addGap(29, 29, 29)
                        .addComponent(loadTool)
                        .addGap(18, 18, 18)
                        .addComponent(removeTool)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void randomPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomPosActionPerformed
        // TODO add your handling code here:
        try {
            backend.sendGcodeCommand("G90 X10 Y10 Z5");
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error going to random position===================================\n\n");
        }
    }//GEN-LAST:event_randomPosActionPerformed

    private void loadToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadToolActionPerformed
        // TODO add your handling code here:
        String[] commands = {"M05", "G90 Z10", "G90 X0 Y0", "G90 Z0", "M03 S1500", "G90 Z-10", "G90 Z0", "G90 Z-10", "G90 Z10", "M05"};
        try {
            for (int i = 0; i < commands.length; i++) {
                backend.sendGcodeCommand(commands[i]);
            }
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error loading tool===================================\n\n");
        }
    }//GEN-LAST:event_loadToolActionPerformed

    private void removeToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToolActionPerformed
        // TODO add your handling code here:
        String[] commands = {"M05", "G90 Z10", "G90 X0 Y0", "G90 Z0", "M04 S1500", "G90 Z-10", "G90 Z10", "M05"};
        try {
            for (int i = 0; i < commands.length; i++) {
                backend.sendGcodeCommand(commands[i]);
            }
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error removing tool===================================\n\n");
        }
    }//GEN-LAST:event_removeToolActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton loadTool;
    private javax.swing.JButton randomPos;
    private javax.swing.JButton removeTool;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // UGS overides
        super.componentOpened();
        //ugsInitComponents();

        setName(Localization.getString("Tool Changer"));
        setToolTipText(Localization.getString("toolchanger"));
        backend.addUGSEventListener(this);
        
        // startup
    }

    @Override
    public void componentClosed() {
        // UGS overrides
        super.componentClosed();
        backend.removeUGSEventListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
