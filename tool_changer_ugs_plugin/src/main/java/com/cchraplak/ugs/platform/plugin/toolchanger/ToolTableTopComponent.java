/*
 * Copyright (C) 2025 camren-chraplak
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.cchraplak.ugs.platform.plugin.toolchanger;

import com.willwinder.ugs.nbp.lib.lookup.CentralLookup;
import com.willwinder.universalgcodesender.i18n.Localization;
import com.willwinder.universalgcodesender.listeners.MessageListener;
import com.willwinder.universalgcodesender.listeners.MessageType;
import com.willwinder.universalgcodesender.listeners.UGSEventListener;
import com.willwinder.universalgcodesender.model.BackendAPI;
import com.willwinder.universalgcodesender.model.UGSEvent;
import com.willwinder.universalgcodesender.model.events.ControllerStateEvent;
import com.willwinder.universalgcodesender.utils.Settings;
import java.util.ArrayList;
import java.util.Objects;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.cchraplak.ugs.platform.plugin.toolchanger//ToolTable//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ToolTableTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "com.cchraplak.ugs.platform.plugin.toolchanger.ToolTableTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ToolTableAction",
        preferredID = "ToolTableTopComponent"
)
@Messages({
    "CTL_ToolTableAction=ToolTable",
    "CTL_ToolTableTopComponent=ToolTable Window",
    "HINT_ToolTableTopComponent=This is a ToolTable window"
})
public final class ToolTableTopComponent extends TopComponent implements MessageListener, UGSEventListener {

    // UGS overide values
    public static final String ACTION_ID = "com.cchraplak.ugs.platform.plugin.toolchanger.ToolTableTopComponent";
    private final JLabel status = new JLabel();
    private final transient BackendAPI backend;
    private final Settings settings;
    
    private boolean listenToConsole = false;
    private ArrayList<TableRow> tableRows = new ArrayList<TableRow>();
    private boolean retrievedTable = false;
    private boolean retrievedPockets = false;
    private int okCount = 0;
    private int pocketCount = 0;
    
    //@Override;
    public void UGSEvent(UGSEvent event) {
        if (event instanceof ControllerStateEvent controllerStateEvent) {
            status.setText(controllerStateEvent.getState().name());
        }
    }
    
    /*private void ugsInitComponents() {
        removeAll();
        setLayout(new BorderLayout());

        status.setHorizontalAlignment(SwingConstants.CENTER);
        status.setText(backend.getControllerState().name());
        add(status, BorderLayout.CENTER);
    }*/
    
    public ToolTableTopComponent() {
        // default
        initComponents();
        setName(Bundle.CTL_ToolTableTopComponent());
        setToolTipText(Bundle.HINT_ToolTableTopComponent());
        
        // UGS backend
        settings = CentralLookup.getDefault().lookup(Settings.class);
        backend = CentralLookup.getDefault().lookup(BackendAPI.class);
        backend.addUGSEventListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        toolTable = new javax.swing.JTable();
        loadTool = new javax.swing.JButton();
        removeTool = new javax.swing.JButton();
        resetTable = new javax.swing.JButton();
        toolLabel = new javax.swing.JLabel();
        openCover = new javax.swing.JButton();
        closeCover = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jMenu1, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jMenu1.text")); // NOI18N
        jMenuBar1.add(jMenu1);

        org.openide.awt.Mnemonics.setLocalizedText(jMenu2, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jMenu2.text")); // NOI18N
        jMenuBar1.add(jMenu2);

        org.openide.awt.Mnemonics.setLocalizedText(jMenu3, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jMenu3.text")); // NOI18N
        jMenuBar2.add(jMenu3);

        org.openide.awt.Mnemonics.setLocalizedText(jMenu4, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jMenu4.text")); // NOI18N
        jMenuBar2.add(jMenu4);

        toolTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Description", "Pocket", "Spindle"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        toolTable.getTableHeader().setReorderingAllowed(false);
        toolTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                toolTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        toolTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                toolTableFocusGained(evt);
            }
        });
        toolTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toolTableMouseClicked(evt);
            }
        });
        toolTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                toolTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(toolTable);
        if (toolTable.getColumnModel().getColumnCount() > 0) {
            toolTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title0")); // NOI18N
            toolTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title1")); // NOI18N
            toolTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolTable.columnModel.title2_1")); // NOI18N
            toolTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jTable1.columnModel.title4_1")); // NOI18N
            toolTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.jTable1.columnModel.title3_1")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(loadTool, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.loadTool.text")); // NOI18N
        loadTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadToolActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeTool, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.removeTool.text")); // NOI18N
        removeTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToolActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(resetTable, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.resetTable.text")); // NOI18N
        resetTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTableActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(toolLabel, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.toolLabel.text")); // NOI18N
        toolLabel.setPreferredSize(new java.awt.Dimension(84, 22));

        org.openide.awt.Mnemonics.setLocalizedText(openCover, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.openCover.text")); // NOI18N
        openCover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCoverActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(closeCover, org.openide.util.NbBundle.getMessage(ToolTableTopComponent.class, "ToolTableTopComponent.closeCover.text")); // NOI18N
        closeCover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeCoverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openCover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeCover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetTable)
                        .addGap(0, 318, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(removeTool)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadTool)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toolLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeTool)
                    .addComponent(loadTool)
                    .addComponent(toolLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openCover)
                    .addComponent(closeCover)
                    .addComponent(resetTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private float safeZ = 10.0f;
    private float freeZ = 0.0f;
    private float unloadZ = -10.0f;
    float pockets[][] = {{-10, -10}, {-5, -5}, {0, 0}, {5, 5}, {10, 10}};
    
    private void loadToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadToolActionPerformed
        // TODO add your handling code here:
        try {
            int row = toolTable.getSelectedRow() + 1;
            backend.sendGcodeCommand("T" + Integer.toString(row));
            backend.sendGcodeCommand("M06");
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error loading tool===================================\n\n");
        }
    }//GEN-LAST:event_loadToolActionPerformed

    private void removeToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToolActionPerformed
        // TODO add your handling code here:
        try {
            backend.sendGcodeCommand("M101");
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error removing tool===================================\n\n");
        }
    }//GEN-LAST:event_removeToolActionPerformed

    private void resetTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTableActionPerformed
        // TODO add your handling code here:
        
        removeTable();
        
        try {
            backend.sendGcodeCommand("$#");
            //backend.sendGcodeCommand("$P");
            okCount = 0;
            System.out.println("Start of message");
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error retrieving tool table===================================\n\n");
        }
        
        listenToConsole = true;
        okCount = 0;
    }//GEN-LAST:event_resetTableActionPerformed

    private void toolTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_toolTableAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_toolTableAncestorAdded

    private void toolTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_toolTablePropertyChange
        // TODO add your handling code here:
        int column = toolTable.getSelectedColumn();
        int row = toolTable.getSelectedRow();
        //TableModel model = toolTable.getModel();
        DefaultTableModel model = (DefaultTableModel) toolTable.getModel();
        
        try {
            String newVal = String.valueOf(model.getValueAt(row, column));
            editRow(row, column, newVal, true);
        }
        catch (Exception e) {
            System.out.println("Unable to edit value");
        }
    }//GEN-LAST:event_toolTablePropertyChange

    private void toolTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toolTableFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_toolTableFocusGained

    private void toolTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toolTableMouseClicked
        // TODO add your handling code here:
        toolLabel.setText("Current Tool ID: " + Integer.toString(toolTable.getSelectedRow() + 1));
    }//GEN-LAST:event_toolTableMouseClicked

    private void openCoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCoverActionPerformed
        // TODO add your handling code here:
        
        try {
            backend.sendGcodeCommand("M103 P1");
        }
        catch (Exception e) {
            System.out.println("Unable to open cover");
        }
    }//GEN-LAST:event_openCoverActionPerformed

    private void closeCoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeCoverActionPerformed
        // TODO add your handling code here:
        
        try {
            backend.sendGcodeCommand("M103 P0");
        }
        catch (Exception e) {
            System.out.println("Unable to close cover");
        }
    }//GEN-LAST:event_closeCoverActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeCover;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadTool;
    private javax.swing.JButton openCover;
    private javax.swing.JButton removeTool;
    private javax.swing.JButton resetTable;
    private javax.swing.JLabel toolLabel;
    private javax.swing.JTable toolTable;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // UGS overides
        super.componentOpened();
        //ugsInitComponents();

        setName(Localization.getString("Tool Changer"));
        setToolTipText(Localization.getString("toolchanger"));
        backend.addUGSEventListener(this);
        backend.addMessageListener(this);
        
        removeTable();
        
        try {
            if (!retrievedTable || !retrievedPockets) {
                listenToConsole = true;
                okCount = 0;
                System.out.println("Startup Retrieve");
                resetTable(true, true);
            }
        }
        catch (Exception e) {
            System.out.println("\n\n===================================Error startup retrieving tool table===================================\n\n");
        }
    }

    @Override
    public void componentClosed() {
        // UGS overrides
        super.componentClosed();
        backend.removeUGSEventListener(this);
        retrievedTable = false;
        retrievedPockets = false;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private void addRow(int id) {

        try {
            DefaultTableModel model = (DefaultTableModel) toolTable.getModel();

            Object[] comp = { id, "name", "description", null, null};
            model.addRow(comp);
            tableRows.add(new TableRow(id));
        }
        catch (Exception e) {
            System.out.println("Unable to parse variables!!!");
        }
    }
    
    private void editRow(int row, int column, String newValue, boolean sendGCode) throws Exception {
        
        if (row >= toolTable.getRowCount() || row < 0 || column < 0 || column >= toolTable.getColumnCount()) {
            if (column == 3 && row == -1) {
                // setting pocket empty
                
                Integer pocket = Integer.valueOf(newValue);
                
                boolean modified = false;
                
                for (int i = 0; i < toolTable.getRowCount(); i++) {
                    
                    if (Objects.equals(tableRows.get(i).getPocket(), pocket)) {
                        row = i;
                        newValue = null;
                        i = toolTable.getRowCount();
                        modified = true;
                    }
                }
                if (!modified) {
                    return;
                }
            }
            else {
                System.out.println("Row/Column out of bounds!");
                return;
            }
        }
        
        
        
        DefaultTableModel model = (DefaultTableModel) toolTable.getModel();
        
        switch (column) {
            case 1 -> {
                if (!Objects.equals(tableRows.get(row).getName(), newValue)) {
                    tableRows.get(row).setName(newValue);
                    model.setValueAt(newValue, row, column);
                }
            }
            case 2 -> {
                if (!Objects.equals(tableRows.get(row).getDescription(), newValue)) {
                    tableRows.get(row).setDescription(newValue);
                    model.setValueAt(newValue, row, column);
                }
            }
            case 3 -> {
                
                Integer newPocket = null;
                boolean nullNumber = false;
                try {
                    newPocket = Integer.valueOf(newValue);
                }
                catch (NumberFormatException e) {
                    nullNumber = true;
                }
                
                for (int i = 0; i < tableRows.size(); i++) {
                    if (i != row && tableRows.get(i).getPocket() != null && tableRows.get(i).getPocket() == newPocket) {
                        model.setValueAt(null, row, column);
                        return;
                    }
                }
                
                if (!Objects.equals(tableRows.get(row).getPocket(), newPocket)) {
                    
                    Integer prevVal = tableRows.get(row).getPocket();

                    tableRows.get(row).setPocket(newPocket);
                    model.setValueAt(newPocket, row, column);
                    
                    if (sendGCode) {
                        System.out.println("\n\n==================False Pocket==================\n\n");
                        if (nullNumber)
                            backend.sendGcodeCommand("M102 P" + Integer.toString(prevVal) + " Q0");
                        else if (newPocket == 0)
                            backend.sendGcodeCommand("M102 P" + Integer.toString(prevVal) + " Q0");
                        else
                            backend.sendGcodeCommand("M102 P" + Integer.toString(newPocket) + " Q" + Integer.toString(row+1));

                        resetTable(false, false);
                    }
                }
            }
            case 4 -> {

                Boolean newSpindle = null;
                boolean nullNumber = false;
                try {
                    newSpindle = Boolean.valueOf(newValue);
                }
                catch (NumberFormatException e) {
                    nullNumber = true;
                }
                
                if (!Objects.equals(tableRows.get(row).getCurrent(), newSpindle)) {
                    
                    for (int i = 0; i < tableRows.size(); i++) {
                        if (i != row) {
                            if (tableRows.get(i).getCurrent()) {
                                tableRows.get(i).setCurrent(false);
                                model.setValueAt(false, i, column);
                            }
                            
                        }
                    }

                    tableRows.get(row).setCurrent(newSpindle);
                    model.setValueAt(newSpindle, row, column);
                    
                    if (sendGCode) {
                        System.out.println("\n\n==================False Change==================\n\n");
                        if (nullNumber) {
                            System.out.println("NULL SPINDLE");
                            backend.sendGcodeCommand("M102 P0 Q0");
                        }
                        else if (newSpindle) {
                            System.out.println("SET SPINDLE");
                            backend.sendGcodeCommand("M102 P0 Q" + Integer.toString(row+1));
                        }
                        else {
                            System.out.println("UNLOAD SPINDLE");
                            backend.sendGcodeCommand("M102 P0 Q0");
                        }

                        resetTable(false, false);
                    }

                    
                }
            }
            default -> System.out.println("No value edited!");
        }
    }
    
    private void resetTable(boolean updateTools, boolean updatePockets) {
        
        try {
            listenToConsole = true;
            okCount = 0;
            if (updateTools) {
                backend.sendGcodeCommand("$#");
            }
            if (updatePockets) {
                backend.sendGcodeCommand("$P");
            }
            retrievedTable = true;
            retrievedPockets = true;
        }
        catch (Exception e) {
            System.out.println("Failed connected getting table");
        }
        
    }

    @Override
    public void onMessage(MessageType messageType, String message) {
        
        if (!retrievedTable) {
            if (message.contains("$#")) {
                System.out.println("Auto getting table");
                resetTable(false, true);
            }
        }
        
        if (message.contains("?")) {
            System.out.println("connected getting table");
            removeTable();
            resetTable(true, true);
        }
        
        if (listenToConsole) {
            
            if (message.contains("[T:")) {
                int start = message.indexOf(':');
                int middle = message.indexOf('|');
                
                String idSring = message.substring(start + 1, middle);
                Integer id = Integer.valueOf(idSring);
                
                
                for (int i = 0; i < tableRows.size(); i++) {
                    if (Objects.equals(tableRows.get(i).getID(), id)) {
                        try {
                            editRow(id, 0, idSring, false);
                            return;
                        }
                        catch (Exception e) {
                            System.out.println("Unable to edit tool row from GCode!");
                        }
                    }
                }
                addRow(id);
            }
            else if (message.contains("ok")) {
                okCount++;
                if (okCount == 2) {
                    System.out.println("Message Ended!");
                    listenToConsole = false;
                }
            }
        }
        
        if (message.contains("[SP|")) {
            int start = message.indexOf('|');
            int end = message.indexOf(']');
            String spindleTool = message.substring(start + 1, end);
            Integer id = Integer.valueOf(spindleTool) - 1;
            
            if (id != -1) {
                spindleTool = Boolean.toString(true);
            }
            else {
                for (int i = 0; i < tableRows.size(); i++) {
                    if (tableRows.get(i).getCurrent()) {
                        id = i;
                        spindleTool = Boolean.toString(false);
                    }
                }
            }

            try {
                if (id != -1) {
                    System.out.println("GCode Edit");
                    editRow(id, 4, spindleTool, false);
                }
                else {
                    System.out.println("Invalid Statement");
                }
            }
            catch (Exception e) {
                System.out.println("Unable to edit spindle from GCode!");
            }
        }
        else if (message.contains("[P:")) {
            int start = message.indexOf(':');
            int middle = message.indexOf('|');
            int end = message.indexOf(']');

            String pocket = message.substring(start + 1, middle);
            int pocketID = Integer.valueOf(pocket);
            String tool = message.substring(middle + 1, end);
            int toolID = Integer.valueOf(tool);
            
            if (pocketID > pocketCount) {
                pocketCount = pocketID;
            }

            try {
                editRow(toolID - 1, 3, pocket, false);
            }
            catch (Exception e) {
                System.out.println("Unable to edit pocket from GCode!");
            }
        }
    }
    
    public void removeTable() {
        
        retrievedTable = false;
        retrievedPockets = false;
        
        pocketCount = 0;
        
        tableRows.removeAll(tableRows);
        
        DefaultTableModel model = (DefaultTableModel) toolTable.getModel();
        final int numRos = model.getRowCount();
        
        for (int i = numRos - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
}
